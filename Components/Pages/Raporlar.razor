@page "/raporlar"
@using TunCRM.Services
@using TunCRM.Models
@inject CrmService CrmService
@inject PdfReportService PdfReportService
@inject IJSRuntime JSRuntime

<PageTitle>Raporlar - TunCRM</PageTitle>

<!-- Sayfa Başlığı -->
<div class="card">
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="card-title">
                    <i class="fas fa-chart-bar text-primary"></i>
                    Raporlar ve Analizler
                </h1>
                <p class="text-muted mb-0">Detaylı CRM raporlarınızı oluşturun ve indirin</p>
            </div>
            <div>
                <button class="btn btn-success" @onclick="RefreshAllData">
                    <i class="fas fa-sync-alt"></i>
                    Verileri Yenile
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Dashboard İstatistikleri -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-center bg-primary text-white">
            <div class="card-body">
                <i class="fas fa-building fa-2x mb-2"></i>
                <h3 class="card-title">@toplamFirma</h3>
                <p class="card-text">Toplam Firma</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center bg-success text-white">
            <div class="card-body">
                <i class="fas fa-handshake fa-2x mb-2"></i>
                <h3 class="card-title">@toplamFirsat</h3>
                <p class="card-text">Toplam Fırsat</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center bg-info text-white">
            <div class="card-body">
                <i class="fas fa-calendar fa-2x mb-2"></i>
                <h3 class="card-title">@toplamAktivite</h3>
                <p class="card-text">Toplam Aktivite</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center bg-warning text-white">
            <div class="card-body">
                <i class="fas fa-tasks fa-2x mb-2"></i>
                <h3 class="card-title">@toplamGorev</h3>
                <p class="card-text">Toplam Görev</p>
            </div>
        </div>
    </div>
</div>

<!-- PDF Rapor Oluşturma -->
<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">
                    <i class="fas fa-file-pdf text-danger"></i>
                    PDF Rapor Oluştur
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            <label class="form-label">Rapor Türü</label>
                            <select class="form-control" @bind="selectedReportType">
                                <option value="firsat">Fırsat Raporu</option>
                                <option value="gorev">Görev Raporu</option>
                                <option value="firma">Firma Raporu</option>
                                <option value="genel">Genel Rapor</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label class="form-label">Başlangıç Tarihi</label>
                            <InputDate class="form-control" @bind-Value="baslangicTarihi" />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label class="form-label">Bitiş Tarihi</label>
                            <InputDate class="form-control" @bind-Value="bitisTarihi" />
                        </div>
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <button class="btn btn-danger w-100" @onclick="GeneratePdfReport" disabled="@isGeneratingPdf">
                            @if (isGeneratingPdf)
                            {
                                <span class="spinner-border spinner-border-sm"></span>
                                <span class="ms-2">Oluşturuluyor...</span>
                            }
                            else
                            {
                                <i class="fas fa-file-pdf"></i>
                                <span class="ms-2">PDF Oluştur</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Fırsat Aşamaları Raporu -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">
                    <i class="fas fa-chart-pie text-primary"></i>
                    Fırsat Aşamaları Dağılımı
                </h5>
            </div>
            <div class="card-body">
                @if (firsatAsamalari.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Aşama</th>
                                    <th class="text-center">Sayı</th>
                                    <th class="text-center">Yüzde</th>
                                    <th class="text-end">Toplam Tutar</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var asama in firsatAsamalari)
                                {
                                    <tr>
                                        <td>
                                            <span class="badge @GetStageBadgeClass(asama.Asama)">
                                                @asama.AsamaAdi
                                            </span>
                                        </td>
                                        <td class="text-center">@asama.Sayi</td>
                                        <td class="text-center">@asama.Yuzde.ToString("F1")%</td>
                                        <td class="text-end">@asama.ToplamTutar.ToString("C0")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-3">
                        <i class="fas fa-chart-pie fa-2x text-muted mb-2"></i>
                        <p class="text-muted">Fırsat verisi bulunamadı</p>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">
                    <i class="fas fa-chart-pie text-success"></i>
                    Görev Durumları Dağılımı
                </h5>
            </div>
            <div class="card-body">
                @if (gorevDurumlari.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Durum</th>
                                    <th class="text-center">Sayı</th>
                                    <th class="text-center">Yüzde</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var durum in gorevDurumlari)
                                {
                                    <tr>
                                        <td>
                                            <span class="badge @GetGorevDurumBadgeClass(durum.Durum)">
                                                @durum.DurumAdi
                                            </span>
                                        </td>
                                        <td class="text-center">@durum.Sayi</td>
                                        <td class="text-center">
                                            @{
                                                var toplamGorev = gorevDurumlari.Sum(g => g.Sayi);
                                                var yuzde = toplamGorev > 0 ? (double)durum.Sayi / toplamGorev * 100 : 0;
                                            }
                                            @yuzde.ToString("F1")%
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-3">
                        <i class="fas fa-chart-pie fa-2x text-muted mb-2"></i>
                        <p class="text-muted">Görev verisi bulunamadı</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Aylık Trendler -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">
                    <i class="fas fa-chart-line text-info"></i>
                    Aylık Aktivite Trendi
                </h5>
            </div>
            <div class="card-body">
                @if (aktiviteTrendi.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Ay</th>
                                    <th class="text-center">Aktivite Sayısı</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var trend in aktiviteTrendi)
                                {
                                    <tr>
                                        <td>@trend.Ay</td>
                                        <td class="text-center">
                                            <span class="badge bg-info">@trend.Sayi</span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-3">
                        <i class="fas fa-chart-line fa-2x text-muted mb-2"></i>
                        <p class="text-muted">Aktivite trend verisi bulunamadı</p>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">
                    <i class="fas fa-chart-area text-success"></i>
                    Aylık Gelir Trendi
                </h5>
            </div>
            <div class="card-body">
                @if (gelirTrendi.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Ay</th>
                                    <th class="text-end">Gelir</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var gelir in gelirTrendi)
                                {
                                    <tr>
                                        <td>@gelir.Ay</td>
                                        <td class="text-end">
                                            <span class="text-success fw-bold">@gelir.Tutar.ToString("C0")</span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-3">
                        <i class="fas fa-chart-area fa-2x text-muted mb-2"></i>
                        <p class="text-muted">Gelir trend verisi bulunamadı</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Firma Şehir Dağılımı -->
<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">
                    <i class="fas fa-map-marker-alt text-warning"></i>
                    Firma Şehir Dağılımı
                </h5>
            </div>
            <div class="card-body">
                @if (firmaSehirleri.Any())
                {
                    <div class="row">
                        @foreach (var sehir in firmaSehirleri.Take(10))
                        {
                            <div class="col-md-2 mb-3">
                                <div class="card text-center">
                                    <div class="card-body">
                                        <h6 class="card-title">@sehir.Sehir</h6>
                                        <h4 class="text-primary">@sehir.Sayi</h4>
                                        <small class="text-muted">Firma</small>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-3">
                        <i class="fas fa-map-marker-alt fa-2x text-muted mb-2"></i>
                        <p class="text-muted">Şehir verisi bulunamadı</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Performans Metrikleri -->
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">
                    <i class="fas fa-tachometer-alt text-primary"></i>
                    Performans Metrikleri
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="text-center">
                            <h4 class="text-success">@kazanilmaOrani.ToString("F1")%</h4>
                            <p class="text-muted">Kazanılma Oranı</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="text-center">
                            <h4 class="text-info">@ortalamaFirsatTutari.ToString("C0")</h4>
                            <p class="text-muted">Ortalama Fırsat Tutarı</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="text-center">
                            <h4 class="text-warning">@ortalamaAktiviteSayisi.ToString("F1")</h4>
                            <p class="text-muted">Firma Başına Ortalama Aktivite</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="text-center">
                            <h4 class="text-primary">@tamamlanmaOrani.ToString("F1")%</h4>
                            <p class="text-muted">Görev Tamamlanma Oranı</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border-radius: 0.5rem;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        border-radius: 0.5rem 0.5rem 0 0 !important;
    }

    .card-title {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .bg-primary { background-color: #007bff !important; }
    .bg-success { background-color: #28a745 !important; }
    .bg-info { background-color: #17a2b8 !important; }
    .bg-warning { background-color: #ffc107 !important; }

    .text-primary { color: #007bff !important; }
    .text-success { color: #28a745 !important; }
    .text-info { color: #17a2b8 !important; }
    .text-warning { color: #ffc107 !important; }
    .text-muted { color: #6c757d !important; }

    .badge {
        padding: 0.35em 0.65em;
        border-radius: 0.25rem;
        font-weight: bold;
        color: white;
        font-size: 0.75em;
    }

    .bg-secondary { background-color: #6c757d !important; }
    .bg-primary { background-color: #007bff !important; }
    .bg-success { background-color: #28a745 !important; }
    .bg-danger { background-color: #dc3545 !important; }
    .bg-warning { background-color: #ffc107 !important; color: #212529 !important; }
    .bg-info { background-color: #17a2b8 !important; }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .form-control {
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
    }

    .form-control:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .btn {
        border-radius: 0.375rem;
        padding: 0.5rem 1rem;
        font-weight: 500;
        font-size: 0.875rem;
    }

    .btn-success { background-color: #28a745; border-color: #28a745; }
    .btn-danger { background-color: #dc3545; border-color: #dc3545; }
    .btn-primary { background-color: #007bff; border-color: #007bff; }

    .fw-bold { font-weight: bold !important; }
    .small { font-size: 0.875em; }
</style>

@code {
    // İstatistikler
    private int toplamFirma = 0;
    private int toplamFirsat = 0;
    private int toplamAktivite = 0;
    private int toplamGorev = 0;

    // Rapor verileri
    private List<FirsatAsamaRaporu> firsatAsamalari = new();
    private List<GorevDurumRaporu> gorevDurumlari = new();
    private List<AktiviteTrendRaporu> aktiviteTrendi = new();
    private List<GelirTrendRaporu> gelirTrendi = new();
    private List<FirmaSehirRaporu> firmaSehirleri = new();

    // Performans metrikleri
    private double kazanilmaOrani = 0;
    private decimal ortalamaFirsatTutari = 0;
    private double ortalamaAktiviteSayisi = 0;
    private double tamamlanmaOrani = 0;

    // PDF Rapor
    private string selectedReportType = "firsat";
    private DateTime? baslangicTarihi = DateTime.Now.AddMonths(-1);
    private DateTime? bitisTarihi = DateTime.Now;
    private bool isGeneratingPdf = false;

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadReportDataWithoutJS();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadReportData();
        }
    }

    private async Task LoadReportDataWithoutJS()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Temel istatistikler
            toplamFirma = await CrmService.GetFirmaSayisiAsync();
            toplamFirsat = await CrmService.GetFirsatlarAsync().ContinueWith(t => t.Result.Count);
            toplamAktivite = await CrmService.GetAktivitelerAsync().ContinueWith(t => t.Result.Count);
            toplamGorev = await CrmService.GetGorevlerAsync().ContinueWith(t => t.Result.Count);

            // Rapor verileri
            firsatAsamalari = await CrmService.GetFirsatAsamalariRaporuAsync();
            gorevDurumlari = await CrmService.GetGorevDurumRaporuAsync();
            aktiviteTrendi = await CrmService.GetAktiviteTrendRaporuAsync();
            gelirTrendi = await CrmService.GetGelirTrendRaporuAsync();
            firmaSehirleri = await CrmService.GetFirmaSehirRaporuAsync();

            // Performans metrikleri hesapla
            await CalculatePerformanceMetricsWithoutJS();
        }
        catch (Exception ex)
        {
            // JS interop olmadan hata yönetimi
            Console.WriteLine($"Veriler yüklenirken hata oluştu: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadReportData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Temel istatistikler
            toplamFirma = await CrmService.GetFirmaSayisiAsync();
            toplamFirsat = await CrmService.GetFirsatlarAsync().ContinueWith(t => t.Result.Count);
            toplamAktivite = await CrmService.GetAktivitelerAsync().ContinueWith(t => t.Result.Count);
            toplamGorev = await CrmService.GetGorevlerAsync().ContinueWith(t => t.Result.Count);

            // Rapor verileri
            firsatAsamalari = await CrmService.GetFirsatAsamalariRaporuAsync();
            gorevDurumlari = await CrmService.GetGorevDurumRaporuAsync();
            aktiviteTrendi = await CrmService.GetAktiviteTrendRaporuAsync();
            gelirTrendi = await CrmService.GetGelirTrendRaporuAsync();
            firmaSehirleri = await CrmService.GetFirmaSehirRaporuAsync();

            // Performans metrikleri hesapla
            await CalculatePerformanceMetrics();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Veriler yüklenirken hata oluştu: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CalculatePerformanceMetricsWithoutJS()
    {
        try
        {
            var firsatlar = await CrmService.GetFirsatlarAsync();
            var kazanilanFirsat = firsatlar.Count(f => f.Asama == FirsatAsamasi.KapatildiKazanildi);
            var kaybedilenFirsat = firsatlar.Count(f => f.Asama == FirsatAsamasi.KapatildiKaybedildi);
            var toplamKapananFirsat = kazanilanFirsat + kaybedilenFirsat;

            kazanilmaOrani = toplamKapananFirsat > 0 ? (double)kazanilanFirsat / toplamKapananFirsat * 100 : 0;
            ortalamaFirsatTutari = firsatlar.Where(f => f.Tutar.HasValue).Average(f => f.Tutar!.Value);

            var aktiviteler = await CrmService.GetAktivitelerAsync();
            ortalamaAktiviteSayisi = toplamFirma > 0 ? (double)aktiviteler.Count / toplamFirma : 0;

            var gorevler = await CrmService.GetGorevlerAsync();
            var tamamlananGorev = gorevler.Count(g => g.Durum == GorevDurumu.Tamamlandi);
            tamamlanmaOrani = toplamGorev > 0 ? (double)tamamlananGorev / toplamGorev * 100 : 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Performans metrikleri hesaplanırken hata oluştu: {ex.Message}");
        }
    }

    private async Task CalculatePerformanceMetrics()
    {
        try
        {
            var firsatlar = await CrmService.GetFirsatlarAsync();
            var kazanilanFirsat = firsatlar.Count(f => f.Asama == FirsatAsamasi.KapatildiKazanildi);
            var kaybedilenFirsat = firsatlar.Count(f => f.Asama == FirsatAsamasi.KapatildiKaybedildi);
            var toplamKapananFirsat = kazanilanFirsat + kaybedilenFirsat;

            kazanilmaOrani = toplamKapananFirsat > 0 ? (double)kazanilanFirsat / toplamKapananFirsat * 100 : 0;
            ortalamaFirsatTutari = firsatlar.Where(f => f.Tutar.HasValue).Average(f => f.Tutar!.Value);

            var aktiviteler = await CrmService.GetAktivitelerAsync();
            ortalamaAktiviteSayisi = toplamFirma > 0 ? (double)aktiviteler.Count / toplamFirma : 0;

            var gorevler = await CrmService.GetGorevlerAsync();
            var tamamlananGorev = gorevler.Count(g => g.Durum == GorevDurumu.Tamamlandi);
            tamamlanmaOrani = toplamGorev > 0 ? (double)tamamlananGorev / toplamGorev * 100 : 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Performans metrikleri hesaplanırken hata oluştu: {ex.Message}");
        }
    }

    private async Task RefreshAllData()
    {
        await LoadReportData();
    }

    private async Task GeneratePdfReport()
    {
        try
        {
            isGeneratingPdf = true;
            StateHasChanged();

            byte[] pdfBytes = selectedReportType switch
            {
                "firsat" => await PdfReportService.GenerateFirsatRaporuAsync(baslangicTarihi, bitisTarihi),
                "gorev" => await PdfReportService.GenerateGorevRaporuAsync(baslangicTarihi, bitisTarihi),
                "firma" => await PdfReportService.GenerateFirmaRaporuAsync(),
                "genel" => await PdfReportService.GenerateFirsatRaporuAsync(baslangicTarihi, bitisTarihi), // Genel rapor için fırsat raporu
                _ => throw new ArgumentException("Geçersiz rapor türü")
            };

            var fileName = $"{selectedReportType}_raporu_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(pdfBytes));

            Console.WriteLine("PDF raporu başarıyla oluşturuldu ve indirildi!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PDF oluşturulurken hata oluştu: {ex.Message}");
        }
        finally
        {
            isGeneratingPdf = false;
            StateHasChanged();
        }
    }

    private string GetStageBadgeClass(int asama)
    {
        return asama switch
        {
            1 => "bg-secondary",
            2 => "bg-info",
            3 => "bg-warning",
            4 => "bg-primary",
            5 => "bg-success",
            6 => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetGorevDurumBadgeClass(int durum)
    {
        return durum switch
        {
            1 => "bg-secondary",
            2 => "bg-primary",
            3 => "bg-success",
            4 => "bg-danger",
            _ => "bg-secondary"
        };
    }
}