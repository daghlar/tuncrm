<!-- Sidebar Header -->
<div class="sidebar-header" data-theme="@(isDarkMode ? "dark" : "light")">
    <h1 class="sidebar-title">
        <i class="fas fa-chart-line"></i>
        TunCRM
    </h1>
    <div class="theme-toggle">
        <button class="btn btn-sm btn-outline-light" @onclick="ToggleTheme" title="Tema Değiştir">
            <i class="fas @(isDarkMode ? "fa-sun" : "fa-moon")" id="theme-icon"></i>
        </button>
    </div>
</div>

<!-- Navigation Menu -->
<ul class="nav-menu">
    <li class="nav-item">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            <i class="fas fa-home"></i>
            Ana Sayfa
        </NavLink>
    </li>

    <li class="nav-item">
        <NavLink class="nav-link" href="firmalar">
            <i class="fas fa-building"></i>
            Firmalar
        </NavLink>
    </li>

    <li class="nav-item">
        <NavLink class="nav-link" href="firsatlar">
            <i class="fas fa-handshake"></i>
            Fırsatlar
        </NavLink>
    </li>

    <li class="nav-item">
        <NavLink class="nav-link" href="aktiviteler">
            <i class="fas fa-calendar"></i>
            Aktiviteler
        </NavLink>
    </li>

        <li class="nav-item">
            <NavLink class="nav-link" href="gorevler">
                <i class="fas fa-tasks"></i>
                Görevler
            </NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="email">
                <i class="fas fa-envelope"></i>
                Email
            </NavLink>
        </li>

    <li class="nav-item">
        <NavLink class="nav-link" href="raporlar">
            <i class="fas fa-chart-bar"></i>
            Raporlar
        </NavLink>
    </li>

    <li class="nav-item">
        <NavLink class="nav-link" href="ayarlar">
            <i class="fas fa-cog"></i>
            Ayarlar
        </NavLink>
    </li>
</ul>

@inject IJSRuntime JS
@inject MainLayout MainLayout

@code {
    private bool isDarkMode = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // LocalStorage'dan tema tercihini oku
                var theme = await JS.InvokeAsync<string>("eval", "localStorage.getItem('theme')");
                Console.WriteLine($"Yüklenen tema: {theme}");
                
                if (theme == "dark")
                {
                    isDarkMode = true;
                    await JS.InvokeVoidAsync("eval", "setTheme('dark')");
                    await JS.InvokeVoidAsync("eval", "updateThemeIcon(true)");
                }
                else
                {
                    isDarkMode = false;
                    await JS.InvokeVoidAsync("eval", "setTheme('light')");
                    await JS.InvokeVoidAsync("eval", "updateThemeIcon(false)");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Tema yükleme hatası: {ex.Message}");
            }
        }
    }

    private async Task ToggleTheme()
    {
        isDarkMode = !isDarkMode;
        Console.WriteLine($"Tema değiştiriliyor: {(isDarkMode ? "dark" : "light")}");
        
        try
        {
            await JS.InvokeVoidAsync("eval", $"localStorage.setItem('theme', '{(isDarkMode ? "dark" : "light")}')");
        }
        catch
        {
            // Ignore errors
        }
        
        MainLayout.UpdateTheme(isDarkMode);
        StateHasChanged();
    }
}